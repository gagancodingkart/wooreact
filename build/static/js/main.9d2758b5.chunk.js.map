{"version":3,"sources":["components/WooConnection.js","components/Home.js","Commoncomponent.js","serviceWorker.js","index.js"],"names":["WooCommerce","WooCommerceAPI","url","consumerKey","consumerSecret","wpAPI","version","Home","props","state","error","isLoaded","items","that","this","getAsync","then","result","setState","JSON","parse","toJSON","body","getData","map","val","index","class","src","images","alt","price","name","Component","Commoncomponent","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qcAGaA,EAAc,I,OAAIC,GAAe,CAC5CC,IAAK,kCACLC,YAAa,8CACbC,eAAgB,8CAChBC,OAAO,EACPC,QAAS,UC8BIC,E,YAlCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,MAAO,IALQ,E,uEASjB,IAAMC,EAAOC,KACbd,EAAYe,SAAS,wBAAwBC,MAAK,SAASC,GACzDJ,EAAKK,SAAS,CACZP,UAAU,EACVC,MAAOO,KAAKC,MAAMH,EAAOI,SAASC,a,0CAMtCR,KAAKS,Y,+BAGJ,OACC,6BACAT,KAAKL,MAAMG,MAAMY,KAAI,SAACC,EAAKC,GAAN,OACnB,yBAAKC,MAAM,YACT,yBAAKC,IAAKH,EAAII,OAAO,GAAGD,IAAKE,IAAI,KACjC,gCAAML,EAAIM,OACV,2BAAIN,EAAIO,e,GA7BCC,aCiBJC,G,wLAXX,OACE,yBAAKC,UAAU,QACb,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/B,W,GAPf0B,cCMVM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAAqBC,SAASC,eAAe,SD2HvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.9d2758b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport WooCommerceAPI from \"woocommerce-api\";\r\n\r\nexport const WooCommerce = new WooCommerceAPI({\r\n  url: \"http://veronica.codingkloud.com\", // Your store URL\r\n  consumerKey: \"ck_0e3d7aae58c8d7d045abde006c59737a90674458\", // Your consumer secret\r\n  consumerSecret: \"cs_f1fc6f531edbdcfa2c5db4d3e5f1bcf7781bdc84\", // Your consumer secret\r\n  wpAPI: true, // Enable the WP REST API integration\r\n  version: \"wc/v1\" // WooCommerce WP REST API version\r\n});\r\n","import React, { Component } from \"react\";\r\nimport { WooCommerce } from \"./WooConnection.js\";\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      items: []\r\n    };\r\n  }\r\n   getData() {\r\n    const that = this;\r\n    WooCommerce.getAsync(\"products?per_page=20\").then(function(result) {\r\n      that.setState({\r\n        isLoaded: true,\r\n        items: JSON.parse(result.toJSON().body)\r\n      });\r\n    });\r\n  }\r\n\r\ncomponentDidMount() {\r\n    this.getData();\r\n  }\r\n render() {\r\n     return (\r\n      <div>\r\n     {this.state.items.map((val, index) => (\r\n        <div class=\"col-sm-4\">            \r\n          <img src={val.images[0].src} alt=\"\" />\r\n          <h2>${val.price}</h2>\r\n          <p>{val.name}</p>\r\n        </div>\r\n       ))}\r\n      </div>)\r\n  }    \r\n}\r\nexport default Home;","import React,{Component} from 'react';\n import ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './CommonComponent.css';\nimport Home from \"./components/Home.js\";\nimport 'tachyons';\nclass Commoncomponent extends Component {\n// class App extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n        <Router>\n          <div>\n            <Route exact path=\"/\" component={Home} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\nexport default Commoncomponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App'; \nimport Commoncomponent from './Commoncomponent';\n import * as serviceWorker from './serviceWorker';\nimport './components/WooConnection.js';\n\nReactDOM.render(<Commoncomponent />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n serviceWorker.unregister();\n "],"sourceRoot":""}